"use strict";(self.webpackChunk_weareseeed_react_square_payments_docs=self.webpackChunk_weareseeed_react_square_payments_docs||[]).push([[926],{4137:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3903:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return c}});var r=t(7462),a=t(3366),o=(t(7294),t(4137)),i=["components"],l={id:"card-props",title:"CreditCard - Props",slug:"/card/props",sidebar_label:"Props",sidebar_position:2},p="Props",d={unversionedId:"card/card-props",id:"card/card-props",title:"CreditCard - Props",description:"buttonProps",source:"@site/docs/card/props.md",sourceDirName:"card",slug:"/card/props",permalink:"/docs/card/props",draft:!1,editUrl:"https://github.com/weareseeed/rswps-site/tree/main/docs/card/props.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"card-props",title:"CreditCard - Props",slug:"/card/props",sidebar_label:"Props",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/card/usage"},next:{title:"Callbacks",permalink:"/docs/card/callbacks"}},s={},c=[{value:"<code>buttonProps</code>",id:"buttonprops",level:2},{value:"<code>callbacks</code>",id:"callbacks",level:2},{value:"<code>children</code>",id:"children",level:2},{value:"<code>focus</code>",id:"focus",level:2},{value:"<code>includeInputLabels</code>",id:"includeinputlabels",level:2},{value:"<code>postalCode</code>",id:"postalcode",level:2},{value:"<code>recalculateSize()</code>",id:"recalculatesize",level:2},{value:"<code>render()</code>",id:"render",level:2},{value:"<code>style</code>",id:"style",level:2}],u={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"props"},"Props"),(0,o.kt)("h2",{id:"buttonprops"},(0,o.kt)("inlineCode",{parentName:"h2"},"buttonProps")),(0,o.kt)("p",null,"Props to be passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<button>")," element. The following props are not supported: ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-disabled"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),". Since we use that to control the disabled state of the button, we don't support it."),(0,o.kt)("p",null,"But in addition to this we offer a ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," prop to control the loading state of the button a.k.a disabling the button."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  const onClick = () => {\n    // do something\n  };\n\n  return (\n    <PaymentForm>\n      <CreditCard\n        buttonProps={{\n          isLoading: true,\n          onClick: onClick,\n        }}\n      />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"callbacks"},(0,o.kt)("inlineCode",{parentName:"h2"},"callbacks")),(0,o.kt)("p",null,"Adds an event listener to the instance of the Card element. You can see ",(0,o.kt)("a",{parentName:"p",href:"/docs/card/callbacks"},(0,o.kt)("strong",{parentName:"a"},"this page"))," for more details."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard\n        callbacks={{\n          cardBrandChanged(event) {\n            console.info(event);\n          },\n          focusClassAdded(event) {\n            console.info(event);\n          },\n        }}\n      />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"children"},(0,o.kt)("inlineCode",{parentName:"h2"},"children")),(0,o.kt)("p",null,"Make it possible to put any component inside. If children is/are given then ",(0,o.kt)("inlineCode",{parentName:"p"},"render")," is not applied."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard>Pay $10</CreditCard>\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"focus"},(0,o.kt)("inlineCode",{parentName:"h2"},"focus")),(0,o.kt)("p",null,"Sets the DOM focus of one of the input fields within the credit card form."),(0,o.kt)("p",null,"For more details about the available options, see ",(0,o.kt)("a",{parentName:"p",href:"https://developer.squareup.com/reference/sdks/web/payments/enums/CardFieldNames"},"CardFieldNames"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard\n        focus=\"cardNumber\" // Can be cardNumber, cvv, expirationDate or postalCode\n      />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"includeinputlabels"},(0,o.kt)("inlineCode",{parentName:"h2"},"includeInputLabels")),(0,o.kt)("p",null,"Render card form with input labels adjacent to corresponding input field"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard includeInputLabels />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"postalcode"},(0,o.kt)("inlineCode",{parentName:"h2"},"postalCode")),(0,o.kt)("p",null,"Sets an initial value of the postal code input field in the card form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard postalCode=\"12345\" />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"recalculatesize"},(0,o.kt)("inlineCode",{parentName:"h2"},"recalculateSize()")),(0,o.kt)("p",null,"Recalculates the size of the card form."),(0,o.kt)("p",null,"The Card component normally automatically resizes based on the size of the buyer's browser, however if the Card component is contained with an element that has a computed style property of ",(0,o.kt)("inlineCode",{parentName:"p"},"display: none"),", then the Card component will no longer have a defined width and therefore will not properly resize between mobile and desktop configurations. Upon being displayed again, the Card component will not automatically update its size to match the browser window."),(0,o.kt)("p",null,"This method ",(0,o.kt)("inlineCode",{parentName:"p"},"recalculateSize()")," can be used to handle this edge case by forcing the Card component to recalculate its size and display appropriately for mobile or desktop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  // Will trigger recalculation of the Card component's size.\n  const myCustomCallback = () => {\n    // do something\n  };\n\n  return (\n    <PaymentForm>\n      <CreditCard recalculateSize={() => myCustomCallback()} />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"render"},(0,o.kt)("inlineCode",{parentName:"h2"},"render()")),(0,o.kt)("p",null,"Make it possible to put any component inside. If render is/are given then ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"buttonProps")," is not applied."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      {/* Render your own component using our component as a Prop */}\n      <CreditCard render={({ Button }) => <Button>Pay $10</Button>} />\n    </PaymentForm>\n  );\n}\n")),(0,o.kt)("h2",{id:"style"},(0,o.kt)("inlineCode",{parentName:"h2"},"style")),(0,o.kt)("p",null,"A map of .css classes and values that customize the style of the input fields"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { CreditCard } from 'react-square-web-payments-form';\n\nexport default function MyApp() {\n  return (\n    <PaymentForm>\n      <CreditCard\n        style={{\n          input: {\n            fontSize: '14px',\n          },\n          'input::placeholder': {\n            color: '#771520',\n          },\n        }}\n      />\n    </PaymentForm>\n  );\n}\n")))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk_weareseeed_react_square_payments_docs=self.webpackChunk_weareseeed_react_square_payments_docs||[]).push([[5803],{4137:function(e,a,t){t.d(a,{Zo:function(){return i},kt:function(){return f}});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var c=r.createContext({}),s=function(e){var a=r.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):d(d({},a),e)),t},i=function(e){var a=s(e.components);return r.createElement(c.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),p=s(t),f=n,h=p["".concat(c,".").concat(f)]||p[f]||u[f]||l;return t?r.createElement(h,d(d({ref:a},i),{},{components:t})):r.createElement(h,d({ref:a},i))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,d=new Array(l);d[0]=p;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,d[1]=o;for(var s=2;s<l;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},814:function(e,a,t){t.r(a),t.d(a,{assets:function(){return i},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var r=t(7462),n=t(3366),l=(t(7294),t(4137)),d=["components"],o={id:"card-callbacks",title:"CreditCard - Callbacks",slug:"/card/callbacks",sidebar_label:"Callbacks",sidebar_position:3},c="`<CreditCard>` - Callbacks",s={unversionedId:"card/card-callbacks",id:"card/card-callbacks",title:"CreditCard - Callbacks",description:"Adds an event listener to the instance of the Card element. The output of the events will look something like this:",source:"@site/docs/card/callbacks.md",sourceDirName:"card",slug:"/card/callbacks",permalink:"/docs/card/callbacks",draft:!1,editUrl:"https://github.com/weareseeed/rswps-site/tree/main/docs/card/callbacks.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"card-callbacks",title:"CreditCard - Callbacks",slug:"/card/callbacks",sidebar_label:"Callbacks",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Props",permalink:"/docs/card/props"},next:{title:"Advanced Usage",permalink:"/docs/card/advanced-usage"}},i={},u=[{value:"<code>cardBrandChanged()</code>",id:"cardbrandchanged",level:2},{value:"<code>errorClassAdded()</code>",id:"errorclassadded",level:2},{value:"<code>errorClassRemoved()</code>",id:"errorclassremoved",level:2},{value:"<code>escape()</code>",id:"escape",level:2},{value:"<code>focusClassAdded()</code>",id:"focusclassadded",level:2},{value:"<code>focusClassRemoved()</code>",id:"focusclassremoved",level:2},{value:"<code>postalCodeChanged()</code>",id:"postalcodechanged",level:2},{value:"<code>submit()</code>",id:"submit",level:2}],p={toc:u};function f(e){var a=e.components,t=(0,n.Z)(e,d);return(0,l.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"creditcard---callbacks"},(0,l.kt)("inlineCode",{parentName:"h1"},"<CreditCard>")," - Callbacks"),(0,l.kt)("p",null,"Adds an event listener to the instance of the Card element. The output of the events will look something like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "cardBrandChanged",\n  "detail": {\n    "cardBrand": "masterCard",\n    "currentState": {\n      "hasErrorClass": false,\n      "hasFocusClass": true,\n      "isCompletelyValid": false,\n      "isEmpty": false,\n      "isPotentiallyValid": true\n    },\n    "eventType": "cardBrandChanged",\n    "field": "cardNumber",\n    "previousState": {\n      "hasErrorClass": false,\n      "hasFocusClass": true,\n      "isCompletelyValid": false,\n      "isEmpty": true,\n      "isPotentiallyValid": true\n    }\n  }\n}\n')),(0,l.kt)("h2",{id:"cardbrandchanged"},(0,l.kt)("inlineCode",{parentName:"h2"},"cardBrandChanged()")),(0,l.kt)("p",null,"Callback function that is called when the payment form detected a new likely credit card brand based on the card number."),(0,l.kt)("h2",{id:"errorclassadded"},(0,l.kt)("inlineCode",{parentName:"h2"},"errorClassAdded()")),(0,l.kt)("p",null,"Callback function that is called when a form field has an invalid value, and the corresponding error CSS class was added to the element."),(0,l.kt)("h2",{id:"errorclassremoved"},(0,l.kt)("inlineCode",{parentName:"h2"},"errorClassRemoved()")),(0,l.kt)("p",null,"Callback function that is called when an invalid value on a form field was corrected, and the corresponding error CSS class was removed from the element."),(0,l.kt)("h2",{id:"escape"},(0,l.kt)("inlineCode",{parentName:"h2"},"escape()")),(0,l.kt)("p",null,"Callback function that is called when the user pressed the ",(0,l.kt)("inlineCode",{parentName:"p"},"Escape")," key while editing a field."),(0,l.kt)("h2",{id:"focusclassadded"},(0,l.kt)("inlineCode",{parentName:"h2"},"focusClassAdded()")),(0,l.kt)("p",null,"Callback function that is called when a form field gained focus, and the corresponding focus CSS class was added to the element"),(0,l.kt)("h2",{id:"focusclassremoved"},(0,l.kt)("inlineCode",{parentName:"h2"},"focusClassRemoved()")),(0,l.kt)("p",null,"Callback function that is called when a form field lost focus, and the corresponding focus CSS class was removed from the element"),(0,l.kt)("h2",{id:"postalcodechanged"},(0,l.kt)("inlineCode",{parentName:"h2"},"postalCodeChanged()")),(0,l.kt)("p",null,"Callback function that is called when the current value of the postal code form field changed."),(0,l.kt)("h2",{id:"submit"},(0,l.kt)("inlineCode",{parentName:"h2"},"submit()")),(0,l.kt)("p",null,'Callback function that is called when the user has triggered submission of the form by pressing "Enter" while editing a field.'))}f.isMDXComponent=!0}}]);